{
    "collab_server" : "",
    "contents" : "#' interp_weightedMean_n\n#'\n#' Interpolation by consideration\n#' @param X, and n by m numeric matrix to with missing values to be completed\n#' @param sim, a list of dist objects indicating the dissimilarity of each element\n#' @param index, a numeric vector of the index of matrix X to which each dist object corresponds. max(index) must be less than or equal to the max index of the matrix X\n#' @param alpha, a numeric vector of values, 0<=alpha<=1, indicating the relative weight of each dist object.\n\ninterp_weightedMean_n <- function(X,sim,index,alpha){\n  if(!all(unlist(lapply(sim,function(x) attr(x,'Size')))==dim(X)[index])){stop('all dist objects in sim must be dist objects')}\n  if(!all(unlist(lapply(sim,is.dist)))){stop('all members of sim must be dist objects')}\n  if(!is.list(sim)){stop('sim must be a list')}\n  for(i in sim){}\n}\n\n#' interp_weightedMean\n#'\n#' Interpolation by consideration of row and column similarity\n#' @param X, n by m numeric matrix to with missing values (NA) to be completed\n#' @param t, integer indicating the number of smoothing iteractions to perform. t=2 by default\n#' @param alpha, (optional) 0<=alpha<=1. Proportion row weights should contribute relative to col weights. aplha=.6 by default\n#' @param D_i, (optional) a distance matrix indicating the distance between rows. Uses euclidean distance by default. NA to skip row similarity consideration.\n#' @param D_j, (optional) a distance matrix indicating the distance between columns. Uses euclidean distance by default. NA to skip row similarity consideration.\n#' @param sim_func_i, (optional) a similarity function describing the conversion of D_i to a similarity metric. Uses $1-10*dist$ (sim_linear_func(x,10)) by default.\n#' @param sim_func_j, (optional) a similarity function describing the conversion of D_j to a similarity metric. Uses $100^(1-dist)$ (sim_exp_func(x,100)) by default.\n#' @export\n#' @author Ben Kellman\n#' @example \n#' X = data.matrix(mtcars)\n#' X[sample(prod(dim(X)),20)] = NA\n#' X_out1 = interp_weightedMean(X,t=5)\n#' X_out2 = interp_weightedMean(X,t=10,D_i=dist_integer(X),sim_func_i=sim_exp_func)\ninterp_weightedMean <- function(X,t=2,alpha=.5,D_i=dist(X),D_j=dist(t(X)),sim_func_i=function(x) sim_lin_func(x,e=10),sim_func_j=function(x) sim_exp_func(x,e=100)){\n  #X_orig = X\n  if(!(is.matrix(X) | is.numeric(X))){stop('X must be a numeric matrix')}\n  if(class(D_i)!='dist' | class(D_j)!='dist'){stop('D_i and D_j must be dist objects')}\n  if(alpha<0 | alpha>1){stop('alpha is not: 0<=alpha<=1')}\n  # normailize dist object\n  if(any(D_i>1)){D_i = D_i/max(D_i)}\n  if(any(D_j>1)){D_j = D_j/max(D_j)}\n  # get similarity from distance objects\n  W_i = sim_func_i(D_i)\n  W_j = sim_func_j(D_j)\n  # get normalization factors\n  Omega_i = diag(unique(dim(W_i)))\n  diag(Omega_i) = 1/apply(W_i,1,function(k) sum(k,na.rm=TRUE))\n  W_i_star = Omega_i %*% W_i\n  Omega_j = diag(unique(dim(W_j)))\n  diag(Omega_j) = 1/apply(W_j,2,function(k) sum(k,na.rm=TRUE))\n  W_j_star = Omega_j %*% W_j\n  \n  # smooth\n  X[is.na(X)]=0\n  while(t>0){\n    t = t-1\n    X =  alpha * W_i_star %*% X  +  (1-alpha) * X %*% W_j_star\n  }\n  X\n}\n\n\n\n\n",
    "created" : 1489090382922.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "48526548",
    "id" : "11120444",
    "lastKnownWriteTime" : 1489079652,
    "last_content_update" : 1489079652,
    "path" : "C:/Users/benja/Google Drive/00_professional/projects/WeightedMeanCompletion/R/core.R",
    "project_path" : "R/core.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}